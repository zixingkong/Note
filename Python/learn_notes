一、list和tuple
list：有序列表，可变。	p = ['asp', 'php'] s = ['python', 'java', p, 'scheme']
tuple：元组，不可变的有序列表。classmates = ('Michael', 'Bob', 'Tracy')
二、循环
1、for...in
2、while
三、dict和set
dict : key-value,字典
	d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
	判断key是否存在：Thomas' in d
		d.get('Thomas')
set ：key的集合，key不能重复(无序，无重复的集合)   s = set([1, 1, 2, 2, 3, 3])
四、可变对象和不可变对象
可变对象：list dict
不可变对象：数字 字符串 元组 None
五、数据类型检查
数据类型检查可以用内置函数 isinstance 实现：
if not isinstance(x, (int, float)):
	raise TypeError('bad operand type')
六、函数的参数
必选参数：
默认参数：def power(x, n=2):
	def enroll(name, gender, age=6, city='Beijing'):
	备注：定义默认参数要牢记一点：默认参数必须指向不变对象！
可变参数：在函数内部，参数 numbers 接收到的是一个tuple，
	def calc(*numbers):
	备注：nums = [1, 2, 3]
	calc(*nums)
关键字参数：关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。
	def person(name, age, **kw):
	person('Adam', 45, gender='M', job='Engineer')
命名关键字参数：如果要限制关键字参数的名字，就可以用命名关键字参数，
					def person(name, age, *, city, job):
参数组合：参数定义的顺序必须是：必选参数、默认参数、可变参数和关键字参数。
				def func(a, b, c=0, *args, **kw):
七、高级特性
1、切片(Slice)： L = [1,2,3,4,5,6,7,8,9,10]
	L[:10:2]
	L[::5]
	L[:](复制操作)
2、迭代(Iteration):通过collections模块的Iterable类型判断一个对象是否是可迭代对象。
	1 from collections import Iterable
	isinstance('abc', Iterable) # str是否可迭代
	2 for i, value in enumerate(['A', 'B', 'C']):
3、列表生成式(List Comprehensions):创建list的生成式
	[x * x for x in range(1, 11)]
	[x * x for x in range(1, 11) if x % 2 == 0]
	[m + n for m in 'ABC' for n in 'XYZ']
	[k + '=' + v for k, v in d.iteritems()]
	[s.lower() for s in L]
	备注：使用内建的 isinstance 函数可以判断一个变量是不是字符串：isinstance(x, str)
4、生成器(Generator)：这种一边循环一边计算的机制，称为生成器（Generator），generator保存的是算法。				
	1 定义的第一种方法generator g = (x * x for x in range(10))
				g.next()
	定义的第二种方法def fib(max):
			n, a, b = 0, 0, 1
			while n < max:
			yield b
			a, b = b, a + b
			n = n + 1
	2 遍历g = (x * x for x in range(10))
		for n in g:
			print n或
		for n in fib(6):
			print n
八、函数式编程
高阶函数(Higher­order function)：变量可以指向函数，函数名也是变量。
定义：既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。
1、map/reduce:
a、map:map() 函数接收两个参数，一个是函数，一个是序列， map 将传入的函数依次作用到序列的每个元素，并把结果作为新的list返回。
	def f(x):
		return x * x
	map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])
b、reduce：reduce把一个函数作用在一个序列[x1, x2, x3...]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算
	def add(x, y):
		return x + y
	reduce(add, [1, 3, 5, 7, 9])
	重点关注：结合map和reduce写出把str转换为int的函数
	def str2int(s):
		def fn(x, y):
			return x * 10 + y
		def char2num(s):
			return {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}[s]
		return reduce(fn, map(char2num, s))
		使用lambda简化：
		def char2num(s):
			return {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}[s]
		def str2int(s):
			return reduce(lambda x,y: x*10+y, map(char2num, s))
2、filter：用于过滤序列，和 map() 不同的时，filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。
	def not_empty(s):
		return s and s.strip()
	filter(not_empty, ['A', '', 'B', None, 'C', ' '])
3、sorted：排序
	sorted([36, 5, 12, 9, 21])
	def reversed_cmp(x, y):
		if x > y:
			return -1
		if x < y:
			return 1
		return 0
	sorted([36, 5, 12, 9, 21], reversed_cmp)
4、返回函数：闭包(Closure)
	def lazy_sum(*args):
		def sum():
			ax = 0
			for n in args:
				ax = ax + n
			return ax
			return sum
	备注：返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，或者后续会发生变化的变量。
5、匿名函数：当我们在传入函数时，有些时候，不需要显式地定义函数，直接传入匿名函数更方便。
	map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9])，关键字 lambda 表示匿名函数，冒号前面的 x 表示函数参数
	备注：匿名函数有个限制，就是只能有一个表达式，不用写 return ，返回值就是该表达式的结果。
6、装饰器(Decorator)：假设我们要增强 now() 函数的功能，比如，在函数调用前后自动打印日志，但又不希望修改 now() 函数的定义，这种在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）。
	不带参数：
	def log(func):
		@functools.wraps(func)
		def wrapper(*args, **kw):
			print 'call %s():' % func.__name__
			return func(*args, **kw)
		return wrapper
	带参数：
	def log(text):
		def decorator(func):
		@functools.wraps(func)
			def wrapper(*args, **kw):
				print '%s %s():' % (text, func.__name__)
				return func(*args, **kw)
			return wrapper
		return decorator
7、偏函数(Partial function)：当函数的参数个数太多，需要简化时，使用 functools.partial 可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。
	import functools
	int2 = functools.partial(int, base=2)
	int2('1000000')
					
					
					
														
					
					
					
					
					
					
					
					
					
					
	
