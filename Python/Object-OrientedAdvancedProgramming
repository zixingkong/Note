 讨论多重继承、定制类、元类等概念。

一、 使用__slots__

 动态绑定允许我们在程序运行的过程中动态给class加上
功能，这在静态语言中很难实现。

 如果我们想要限制实例的属性怎么办？比如，只允许对Student实例添加 name 和 age 属性。
为了达到限制的目的，Python允许在定义class的时候，定义一个特殊的 __slots__ 变量，来限制该class实例能添加的属性：
class Student(object):
    __slots__ = ('name', 'age') # 用tuple定义允许绑定的属性名称
注意：使用 __slots__ 要注意， __slots__ 定义的属性仅对当前类实例起作用，对继承的子类是不起作用的。

二、 使用@property

 有没有既能检查参数，又可以用类似属性这样简单的方式来访问类的变量呢？
 还记得装饰器（decorator）可以给函数动态加上功能吗？对于类的方法，装饰器一样起作用。Python内置的 @property 装饰器就是负责把一个方法变成属性调用的：
class Student(object):
   @property
   def score(self):
      return self._score

   @score.setter
   def score(self, value):
      if not isinstance(value, int):
          raise ValueError('score must be an integer!')
      if value < 0 or value > 100:
          raise ValueError('score must between 0 ~ 100!')
      self._score = value

@property 的实现比较复杂，我们先考察如何使用。把一个getter方法变成属性，只需要加上 @property 就可以了，此时， @property 本身又创建了另一个装饰器 @score.setter ，负责把一个setter方法变成属性赋值，于是，我们就拥有一个可控的属性操作：
>>> s = Student()
>>> s.score = 60 # OK，实际转化为s.set_score(60)
>>> s.score # OK，实际转化为s.get_score()
60
>>> s.score = 9999
Traceback (most recent call last):
...
ValueError: score must between 0 ~ 100!

小结： @property 广泛应用在类的定义中，可以让调用者写出简短的代码，同时保证对参数进行必要的检查，这样，程序运行时就减少了出错的可能性。

三、 多重继承

 通过多重继承，一个子类就可以同时获得多个父类的所有功能。
 class Dog(Mammal, Runnable):
   pass

 MixIn

 为了更好地看出继承关系，我们把 Runnable 和 Flyable 改为 RunnableMixIn 和 FlyableMixIn 。类似的，你还可以定义出
肉食动物 CarnivorousMixIn 和植食动物 HerbivoresMixIn ，让某个动物同时拥有好几个MixIn：
class Dog(Mammal, RunnableMixIn, CarnivorousMixIn):
   pass
MixIn的目的就是给一个类增加多个功能，这样，在设计类的时候，我们优先考虑通过多重继承来组合多个MixIn的功能，而不是设计多层次的复杂的继承关系。
如果你打算搞一个更先进的协程模型，可以编写一个 CoroutineMixIn ：
class MyTCPServer(TCPServer, CoroutineMixIn):
    pass
这样一来，我们不需要复杂而庞大的继承链，只要选择组合不同的类的功能，就可以快速构造出所需的子类。

小结： 由于Python允许使用多重继承，因此，MixIn就是一种常见的设计。只允许单一继承的语言（如Java）不能使用MixIn的设计。

四、定制类

 __len__() 方法我们也知道是为了能让class作用于 len() 函数。

1、 __str__：

 >>> class Student(object):
... def __init__(self, name):
... self.name = name
... def __str__(self):
... return 'Student object (name: %s)' % self.name
...
>>> print(Student('Michael'))
Student object (name: Michael)

 这是因为直接显示变量调用的不是 __str__() ，而是 __repr__() ，两者的区别是 __str__() 返回用户看到的字符串，
而 __repr__() 返回程序开发者看到的字符串，也就是说， __repr__() 是为调试服务的。
 class Student(object):
    def __init__(self, name):
       self.name = name

    def __str__(self):
       return 'Student object (name=%s)' % self.name

    __repr__ = __str__

 2、__iter__：

 如果一个类想被用于 for ... in 循环，类似list或tuple那样，就必须实现一个 __iter__() 方法，该方法返回一个迭代对
象，然后，Python的for循环就会不断调用该迭代对象的 __next__() 方法拿到循环的下一个值，直到遇到 StopIteration
错误时退出循环。
我们以斐波那契数列为例，写一个Fib类，可以作用于for循环：
class Fib(object):
   def __init__(self):
      self.a, self.b = 0, 1 # 初始化两个计数器a，b

   def __iter__(self):
      return self # 实例本身就是迭代对象，故返回自己

   def __next__(self):
      self.a, self.b = self.b, self.a + self.b # 计算下一个值
      if self.a > 100000: # 退出循环的条件
          raise StopIteration();
      return self.a # 返回下一个值
现在，试试把Fib实例作用于for循环：
>>> for n in Fib():
... print(n)
...
  ...
1
1
2
3
5
...
46368
75025

3、 __getitem__：

 Fib实例虽然能作用于for循环，看起来和list有点像，但是，把它当成list来使用还是不行，
 要表现得像list那样按照下标取出元素，需要实现 __getitem__() 方法：
class Fib(object):
   def __getitem__(self, n):
      a, b = 1, 1
      for x in range(n):
         a, b = b, a + b
      return a
 但是list有个神奇的切片方法：
>>> list(range(100))[5:10]
[5, 6, 7, 8, 9]
对于Fib却报错。原因是 __getitem__() 传入的参数可能是一个int，也可能是一个切片对象 slice ，所以要做判断：
 class Fib(object):
    def __getitem__(self, n):
       if isinstance(n, int): # n是索引
          a, b = 1, 1
          for x in range(n):
          a, b = b, a + b
          return a
       if isinstance(n, slice): # n是切片
           start = n.start
           stop = n.stop
           if start is None:
              start = 0
           a, b = 1, 1
           L = []
           for x in range(stop):
              if x >= start:
                 L.append(a)
              a, b = b, a + b
           return L
现在试试Fib的切片：
>>> f = Fib()
>>> f[0:5]
[1, 1, 2, 3, 5]
>>> f[:10]
[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
但是没有对step参数作处理：
>>> f[:10:2]
[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
 此外，如果把对象看成 dict ， __getitem__() 的参数也可能是一个可以作key的object，例如 str 。
与之对应的是 __setitem__() 方法，把对象视作list或dict来对集合赋值。最后，还有一个 __delitem__() 方法，用于删
除某个元素。
总之，通过上面的方法，我们自己定义的类表现得和Python自带的list、tuple、dict没什么区别，这完全归功于动态语言
的“鸭子类型”，不需要强制继承某个接口。

4、 __getattr__：

 ython还有另一个机制，那就是写一个 __getattr__() 方法，动态返回一个属性。
 class Student(object):
def __getattr__(self, attr):
if attr=='age':
return lambda: 25
raise AttributeError('\'Student\' object has no attribute \'%s\'' % attr)
这实际上可以把一个类的所有属性和方法调用全部动态化处理了，不需要任何特殊手段。
这种完全动态调用的特性有什么实际作用呢？作用就是，可以针对完全动态的情况作调用。

5、 __call__：

 能不能直接在实例本身上调用呢？在Python中，答案是肯定的。
任何类，只需要定义一个 __call__() 方法，就可以直接对实例进行调用。请看示例：
class Student(object):
   def __init__(self, name):
      self.name = name

   def __call__(self):
      print('My name is %s.' % self.name)
调用方式如下：
>>> s = Student('Michael')
>>> s() # self参数不要传入
My name is Michael.
 >>> callable(max)
True
>>> callable([1, 2, 3])
False
通过 callable() 函数，我们就可以判断一个对象是否是“可调用”对象。
小结：Python的class允许定义许多定制方法，可以让我们非常方便地生成特定的类。

五、使用枚举类：

 为这样的枚举类型定义一个class类型，然后，每个常量都是class的一个唯一实例。Python提供了 Enum 类来
实现这个功能：
from enum import Enum
Month = Enum('Month', ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'De
c'))
这样我们就获得了 Month 类型的枚举类，可以直接使用 Month.Jan 来引用一个常量，或者枚举它的所有成员：
for name, member in Month.__members__.items():
print(name, '=>', member, ',', member.value)
 如果需要更精确地控制枚举类型，可以从 Enum 派生出自定义类：
from enum import Enum, unique

@unique
class Weekday(Enum):
   Sun = 0 # Sun的value被设定为0
   Mon = 1
   Tue = 2
   Wed = 3
   Thu = 4
   Fri = 5
   Sat = 6
@unique 装饰器可以帮助我们检查保证没有重复值。
>>> print(day1 == Weekday.Tue)
False
>>> print(Weekday(1))
Weekday.Mon
>>> print(day1 == Weekday(1))
True
可见，既可以用成员名称引用枚举常量，又可以直接根据value的值获得枚举常量。
小结：Enum 可以把一组相关常量定义在一个class中，且class不可变，而且成员可以直接比较。

六、使用元类：

 type()
动态语言和静态语言最大的不同，就是函数和类的定义，不是编译时定义的，而是运行时动态创建的。
 type() 函数可以查看一个类型或变量的类型， Hello 是一个class，它的类型就是 type ，而 h 是一个实例，它的类型就
是class Hello 。
我们说class的定义是运行时动态创建的，而创建class的方法就是使用 type() 函数。
type() 函数既可以返回一个对象的类型，又可以创建出新的类型。

metaclass

除了使用 type() 动态创建类以外，要控制类的创建行为，还可以使用metaclass。
metaclass允许你创建类或者修改类。换句话说，你可以把类看成是metaclass创建出来的“实例”。

class ListMetaclass(type):
    def __new__(cls, name, bases, attrs):
        attrs['add'] = lambda self, value: self.append(value)
        return type.__new__(cls, name, bases, attrs)

class MyList(list, metaclass=ListMetaclass):
    pass

L = MyList()
L.add(1)
print(L)

L2 = list()
L2.add(2)
print(L2)

小结：metaclass是Python中非常具有魔术性的对象，它可以改变类创建时的行为。这种强大的功能使用起来务必小心。












