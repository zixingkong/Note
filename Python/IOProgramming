 IO在计算机中指Input/Output，也就是输入和输出。由于程序和运行时数据是在内存中驻留，由CPU这个超快的计算核心来执行，涉及到数据交换的地方，通常是磁盘、网络等，就需要IO接口。

 程序完成IO操作会有Input和Output两个数据流。当然也有只用一个的情况，比如，从磁盘读取文件到内存，就只有Input操作，反过来，把数据写到磁盘文件里，就只是一个Output操作。

 IO编程中，Stream（流）是一个很重要的概念，可以把流想象成一个水管，数据就是水管里的水，但是只能单向流动。Input Stream就是数据从外面（磁盘、网络）流进内存，Output Stream就是数据从内存流到外面去。对于浏览网页来说，浏览器和新浪服务器之间至少需要建立两根水管，才可以既能发数据，又能收数据。

 比如要把100M的数据写入磁盘，CPU输出100M的数据只需要0.01秒，可是磁盘要接收这100M数据可能需要10秒，怎么办呢？有两种办法：
第一种是CPU等着，也就是程序暂停执行后续代码，等100M的数据在10秒后写入磁盘，再接着往下执行，这种模式称为同步
IO；
另一种方法是CPU不等待，只是告诉磁盘，“您老慢慢写，不着急，我接着干别的事去了”，于是，后续代码可以立刻接着
执行，这种模式称为异步IO。
 操作IO的能力都是由操作系统提供的，每一种编程语言都会把操作系统提供的低级C接口封装起来方便使用，Python也不例外。

一、文件读写

1、读文件：

文本文件：
 with open('/path/to/file', 'r') as f:
     print(f.read())
 调用 read() 会一次性读取文件的全部内容， read(size)方法每次最多读取size个字节的内容，调用 readline() 可以每次读取一行内容，调用 readlines() 一次读取所有
内容并按行返回 list 。因此，要根据需要决定怎么调用。

二进制文件：
 f = open('/Users/michael/test.jpg', 'rb')
 f.read()

字符编码：
 要读取非UTF-8编码的文本文件，需要给 open() 函数传入 encoding 参数，例如，读取GBK编码的文件：
 f = open('/Users/michael/gbk.txt', 'r', encoding='gbk')
 f.read()
文本文件中夹杂非法字符
 f = open('/Users/michael/gbk.txt', 'r', encoding='gbk', errors='ignore')

2、写文件：

 f = open('/Users/michael/test.txt', 'w')
 f.write('Hello, world!')
 f.close()

 with open('/Users/michael/test.txt', 'w') as f:
     f.write('Hello, world!')
 要写入特定编码的文本文件，请给 open() 函数传入 encoding 参数，将字符串自动转换成指定编码。
 在Python中，文件读写是通过 open() 函数打开的文件对象完成的。使用 with 语句操作文件IO是个好习惯。

二、 StringIO和BytesIO

1、StringIO：

 多时候，数据读写不一定是文件，也可以在内存中读写。
StringIO顾名思义就是在内存中读写str。
要把str写入StringIO，我们需要先创建一个StringIO，然后，像文件一样写入即可：
from io import StringIO
f = StringIO()
f.write('hello')
f.write(' ')
f.write('world!')
>>> print(f.getvalue())
hello world!
getvalue() 方法用于获得写入后的str。
 要读取StringIO，可以用一个str初始化StringIO，然后，像读文件一样读取：
from io import StringIO
f = StringIO('Hello!\nHi!\nGoodbye!')
while True:
  s = f.readline()
  if s == '':
  break
  print(s.strip())

2、 BytesIO：

 StringIO操作的只能是str，如果要操作二进制数据，就需要使用BytesIO。
BytesIO实现了在内存中读写bytes，我们创建一个BytesIO，然后写入一些bytes：
from io import BytesIO
f = BytesIO()
f.write('中文'.encode('utf-8'))
>>> print(f.getvalue())
b'\xe4\xb8\xad\xe6\x96\x87'
请注意，写入的不是str，而是经过UTF-8编码的bytes。
和StringIO类似，可以用一个bytes初始化BytesIO，然后，像读文件一样读取：
from io import StringIO
f = BytesIO(b'\xe4\xb8\xad\xe6\x96\x87')
>>> f.read()
b'\xe4\xb8\xad\xe6\x96\x87'
小结
StringIO和BytesIO是在内存中操作str和bytes的方法，使得和读写文件具有一致的接口。

三、操作文件和目录：

环境变量： os.environ    os.environ.get('PATH')
操作文件和目录：
 操作文件和目录的函数一部分放在 os 模块中，一部分放在 os.path 模块中。
 # 查看当前目录的绝对路径:
>>> os.path.abspath('.')
'/Users/michael'
# 在某个目录下创建一个新目录，首先把新目录的完整路径表示出来:
>>> os.path.join('/Users/michael', 'testdir')
'/Users/michael/testdir'
# 然后创建一个目录:
>>> os.mkdir('/Users/michael/testdir')
# 删掉一个目录:
>>> os.rmdir('/Users/michael/testdir')

 把两个路径合成一个时，不要直接拼字符串，而要通过 os.path.join() 函数，这样可以正确处理不同操作系统的路径分隔符。 要拆分路径时，也不要直接去拆字符串，而要通过 os.path.split() 函数，这样可以把一个路径拆分为两部分，后一部分总是最后级别的目录或文件名：
 >>> os.path.split('/Users/michael/testdir/file.txt')
('/Users/michael/testdir', 'file.txt')
os.path.splitext() 可以直接让你得到文件扩展名，很多时候非常方便：
>>> os.path.splitext('/path/to/file.txt')
('/path/to/file', '.txt')
 # 对文件重命名:
>>> os.rename('test.txt', 'test.py')
# 删掉文件:
>>> os.remove('test.py')
 最后看看如何利用Python的特性来过滤文件。比如我们要列出当前目录下的所有目录，只需要一行代码：
>>> [x for x in os.listdir('.') if os.path.isdir(x)]
['.lein', '.local', '.m2', '.npm', '.ssh', '.Trash', '.vim', 'Applications', 'Desktop', ...]
要列出所有的 .py 文件，也只需一行代码：
>>> [x for x in os.listdir('.') if os.path.isfile(x) and os.path.splitext(x)[1]=='.py']
['apis.py', 'config.py', 'models.py', 'pymonitor.py', 'test_db.py', 'urls.py', 'wsgiapp.py']

小结： Python的 os 模块封装了操作系统的目录和文件操作，要注意这些函数有的在 os 模块中，有的在 os.path 模块中。

四、序列化

 把变量从内存中变成可存储或传输的过程称之为序列化，在Python中叫pickling，在其他语言中也被称之为serialization，marshalling，flattening等等，都是一个意思。
 序列化之后，就可以把序列化后的内容写入磁盘，或者通过网络传输到别的机器上。反过来，把变量内容从序列化的对象重新读到内存里称之为反序列化，即unpickling。
 Python提供了 pickle 模块来实现序列化。
 把一个对象序列化并写入文件：
>>> import pickle
>>> d = dict(name='Bob', age=20, score=88)
>>> pickle.dumps(d)
b'\x80\x03}q\x00(X\x03\x00\x00\x00ageq\x01K\x14X\x05\x00\x00\x00scoreq\x02KXX\x04\x00\x00\x00nameq\x03X
\x03\x00\x00\x00Bobq\x04u.'
pickle.dumps() 方法把任意对象序列化成一个 bytes ，然后，就可以把这个 bytes 写入文件。或者用另一个方
法 pickle.dump() 直接把对象序列化后写入一个file-like Object：
>>> f = open('dump.txt', 'wb')
>>> pickle.dump(d, f)
>>> f.close()
看看写入的 dump.txt 文件，一堆乱七八糟的内容，这些都是Python保存的对象内部信息。
 当我们要把对象从磁盘读到内存时，可以先把内容读到一个 bytes ，然后用 pickle.loads() 方法反序列化出对象，也可以直接用 pickle.load() 方法从一个 file-like Object 中直接反序列化出对象。我们打开另一个Python命令行来反序列化刚才保存的对象：
>>> f = open('dump.txt', 'rb')
>>> d = pickle.load(f)
>>> f.close()
>>> d
{'age': 20, 'score': 88, 'name': 'Bob'}

JSON：

 如果我们要在不同的编程语言之间传递对象，就必须把对象序列化为标准格式，比如XML，但更好的方法是序列化为JSON，因为JSON表示出来就是一个字符串，可以被所有语言读取，也可以方便地存储到磁盘或者通过网络传输。JSON不仅是标准格式，并且比XML更快，而且可以直接在Web页面中读取，非常方便。

 JSON表示的对象就是标准的JavaScript语言的对象，JSON和Python内置的数据类型对应如下：
		
 
JSON类型 	Python类型	   
		{} 	dict	   
		[] 	list	   
		"string" 	str	   
		1234.56 	int或float	 
true/false True/False
null None

 Python内置的 json 模块提供了非常完善的Python对象到JSON格式的转换。我们先看看如何把Python对象变成一个JSON：
>>> import json
>>> d = dict(name='Bob', age=20, score=88)
>>> json.dumps(d)
'{"age": 20, "score": 88, "name": "Bob"}'

 dumps() 方法返回一个 str ，内容就是标准的JSON。类似的， dump() 方法可以直接把JSON写入一个 file-like Object 。
要把JSON反序列化为Python对象，用 loads() 或者对应的 load() 方法，前者把JSON的字符串反序列化，后者从 file-like Object 中读取字符串并反序列化：
>>> json_str = '{"age": 20, "score": 88, "name": "Bob"}'
>>> json.loads(json_str)
{'age': 20, 'score': 88, 'name': 'Bob'}

JSON进阶：

 Python的 dict 对象可以直接序列化为JSON的 {} ，不过，很多时候，我们更喜欢用 class 表示对象，比如定义 Student类，然后序列化：
 mport json
class Student(object):
def __init__(self, name, age, score):
self.name = name
self.age = age
self.score = score

 def student2dict(std):
return {
'name': std.name,
'age': std.age,
'score': std.score
}

 >>> print(json.dumps(s, default=student2dict))
{"age": 20, "name": "Bob", "score": 88}
 我们可以偷个懒，把任意 class 的实例变
为 dict ：
print(json.dumps(s, default=lambda obj: obj.__dict__))

 如果我们要把JSON反序列化为一个 Student 对象实例， loads() 方法首先转换出一个 dict 对象，然后，我们传入的 object_hook 函数负责把 dict 转换为 Student 实例：
def dict2student(d):
return Student(d['name'], d['age'], d['score'])
运行结果如下：
>>> json_str = '{"age": 20, "score": 88, "name": "Bob"}'
>>> print(json.loads(json_str, object_hook=dict2student))
<__main__.Student object at 0x10cd3c190>
打印出的是反序列化的 Student 实例对象。

小结： Python语言特定的序列化模块是 pickle ，但如果要把序列化搞得更通用、更符合Web标准，就可以使用 json 模块。json 模块的 dumps() 和 loads() 函数是定义得非常好的接口的典范。当我们使用时，只需要传入一个必须的参数。但是，当默认的序列化或反序列机制不满足我们的要求时，我们又可以传入更多的参数来定制序列化或反序列化的规则，既
做到了接口简单易用，又做到了充分的扩展性和灵活性
