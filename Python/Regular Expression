 字符串是编程时涉及到的最多的一种数据结构，对字符串进行操作的需求几乎无处不在。比如判断一个字符串是否是合法的Email地址，虽然可以编程提取 @ 前后的子串，再分别判断是否是单词和域名，但这样做不但麻烦，而且代码难以复用。正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。

因为正则表达式也是用字符串表示的，所以，我们要首先了解如何用字符来描述字符。

1、基础：

 \d 可以匹配一个数字
 \w 可以匹配一个字母或数字
 . 可以匹配任意字符

要匹配变长的字符，在正则表达式中：

 * 表示任意个字符（包括0个）
 + 表示至少一个字符
 ? 表示0个或1个字符
 {n} 表示n个字符
 {n,m} 表示n-m个字符
 \s 可以匹配一个空格（也包括Tab等空白符）

2、进阶：

 要做更精确地匹配，可以用 [] 表示范围
 [a-zA-Z\_][0-9a-zA-Z\_]{0, 19} 更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符），也就是Python合法的变量。
 A|B 可以匹配A或B，所以 [P|p]ython 可以匹配 'Python' 或者 'python' 。

^ 表示行的开头， ^\d 表示必须以数字开头。
$ 表示行的结束， \d$ 表示必须以数字结束。

3、re模块：

 因此我们强烈建议使用Python的 r 前缀，就不用考虑转义的问题了：

 s = r'ABC\-001' # Python的字符串
# 对应的正则表达式字符串不变：
# 'ABC\-001'


 先看看如何判断正则表达式是否匹配：
>>> import re
>>> re.match(r'^\d{3}\-\d{3,8}$', '010-12345')
<_sre.SRE_Match object; span=(0, 9), match='010-12345'>
>>> re.match(r'^\d{3}\-\d{3,8}$', '010 12345')
>>>
match() 方法判断是否匹配，如果匹配成功，返回一个 Match 对象，否则返回 None 。常见的判断方法就是：

test = '用户输入的字符串'
if re.match(r'正则表达式', test):
   print('ok')
else:
   print('failed')


4、切分字符串：

 用正则表达式切分字符串比用固定的字符更灵活，请看正常的切分代码：

>>> 'a b c'.split(' ')
['a', 'b', '', '', 'c']

嗯，无法识别连续的空格，用正则表达式试试：

>>> re.split(r'\s+', 'a b c')
['a', 'b', 'c']

无论多少个空格都可以正常分割。加入 , 试试：

>>> re.split(r'[\s\,]+', 'a,b, c d')
['a', 'b', 'c', 'd']

再加入 ; 试试：

>>> re.split(r'[\s\,\;]+', 'a,b;; c d')
['a', 'b', 'c', 'd']

如果用户输入了一组标签，下次记得用正则表达式来把不规范的输入转化成正确的数组。

5、分组：

 除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用 () 表示的就是要提取的分组（Group）。比如：
^(\d{3})-(\d{3,8})$ 分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码：

>>> m = re.match(r'^(\d{3})-(\d{3,8})$', '010-12345')
>>> m
<_sre.SRE_Match object; span=(0, 9), match='010-12345'>
>>> m.group(0)
'010-12345'
>>> m.group(1)
'010'
>>> m.group(2)
'12345'

如果正则表达式中定义了组，就可以在 Match 对象上用 group() 方法提取出子串来。
注意到 group(0) 永远是原始字符串， group(1) 、 group(2) 厖表示第1、2、……个子串。

6、贪婪匹配：

 最后需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的 0 ：

>>> re.match(r'^(\d+)(0*)$', '102300').groups()
('102300', '')

由于 \d+ 采用贪婪匹配，直接把后面的 0 全部匹配了，结果 0* 只能匹配空字符串了。
必须让 \d+ 采用非贪婪匹配（也就是尽可能少匹配），才能把后面的 0 匹配出来，加个 ? 就可以让 \d+ 采用非贪婪匹配：

>>> re.match(r'^(\d+?)(0*)$', '102300').groups()
('1023', '00')

7、编译：

 当我们在Python中使用正则表达式时，re模块内部会干两件事情：

1. 编译正则表达式，如果正则表达式的字符串本身不合法，会报错；
2. 用编译后的正则表达式去匹配字符串。

 如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：

>>> import re
# 编译:
>>> re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')
# 使用：
>>> re_telephone.match('010-12345').groups()
('010', '12345')
>>> re_telephone.match('010-8086').groups()
('010', '8086')

编译后生成Regular Expression对象，由于该对象自己包含了正则表达式，所以调用对应的方法时不用给出正则字符串。

小结：正则表达式非常强大，要在短短的一节里讲完是不可能的。要讲清楚正则的所有内容，可以写一本厚厚的书了。如果你经常遇到正则表达式的问题，你可能需要一本正则表达式的参考书。

