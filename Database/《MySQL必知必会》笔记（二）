							《MySQL必知必会》笔记（二）
一、用正则表达式进行搜索：
	正则表达式是用来匹配文本的特殊的串(字符集合)
	使用MySQL正则表达式：正则表达式的作用是用来匹配文本，将一个模式(正则表达式)与一个文本串进行比较。
		基本字符匹配：select prod_name from products where prod_name regexp '1000' order by prod_name;
				select prod_name from products where prod_name regexp '.000' order by prod_name;
			like和regexp的区别：like匹配整个列，而regexp在列值内进行匹配。
				select prod_name from products where prod_name like '1000';
				select prod_name form pproducts where prod_name regexp '1000';
			为匹配大小写，使用binary关键字：select prod_name from products where prod_name regexp binary 'JetPack .000';
		进行or匹配：select prod_name from products where prod_name regexp '1000|2000' order by prod_name;
		匹配几个字符之一：select prod_name from products where prod_name regexp '[123] Ton' order by prod_name;
		匹配范围：select prod_name from products where prod_name regexp '[1-5] Ton' order by prod_name;
		匹配特殊字符：select vend_name from vendors where vend_name regexp '.' order by vend_name;
				select vend_name from vendors where vend_name regexp '\\.' order by vend_name;
		匹配字符类：[:digit:]
		匹配多个实例：select prod_name from products where prod_name regexp '\\([0-9] sticks?\\)';
				select prod_name from products where prod_name regexp '[[:digit:]]{4}' order by prod_name;
		定位符：select prod_name from products where prod_name regexp '^[0-9\\.]' order by prod_name; 
二、创建计算字段：
	计算字段:计算字段并不实际存在与数据库中，计算字段是运行时在select语句内创建的。
	拼接字段：
		select CONCAT(vend_name,' (',vend_country,')') from vendors order by vend_name;
		select CONCAT(RTRIM(vend_name),' (',RTRIM(vend_country),')') from vendors order by vend_name;
		使用别名：
			select CONCAT(RTRIM(vend_name),' (',RTRIM(vend_country),')') as vend_title from vendors order by vend_name;
	执行算数计算：
		select prod_id,quantity,item_price from orderitems where order_num = 20005;
		select prod_id,quantity,item_price,quantity * item_price as expanded_price from orderitems where order_num = 20005;
三、使用数据处理函数
	函数
	使用函数：用于处理文本串
		用于在数值数据上进行算术操作
		用于处理日期和时间值并从这些值中提取特定成分
		返回DBMS正使用的特殊信息
	文本处理函数：
		select vend_name,upper(vend_name) as vedn_name_upcase from vendors order by vend_name;
		select cust_name ,cust_contact from customers where cust_contact = 'Y. Lie';
		select cust_name ,cust_contact from customers where SOUNDEX(cust_contact) = SOUNDEX('Y Lie')；
	日期和时间处理函数：
		select cust_id,order_num from orders where order_date = '2005-09-01';
		select cust_id,order_num from orders where date(order_date) = '2005-09-01';
		select cust_id,order_num from orders where date(order_date) between '2005-09-01' and '2005-09-30';
		select cust_id,order_num from orders where year(order_date) = 2005 and month(order_date) = 9;
	数值处理函数：
四、汇总数据
	聚集函数：
		检索类型：确定表中行数、获得表中行组的和，找出表列（或所有行或某些特定的行）的最大值、最小值和平均值。
		聚集函数(aggregate fucntion)：运行在行组上，计算和返回单个值的函数。
	avg函数：select AVG(prod_price) as avg_price from products;
		select AVG(prod_price) as avg_price from products where vend_id = 1003;
	count函数：select count(*) as num_cust from customers;
		select count(cust_email) as num_cust from customers;
	max函数：select max(prod_price) as max_price from products;
	min函数：select min(prod_price) as min_price from products;
	sum函数：select sum(quantity) as item_ordered from orderitems where order_num = 20005;
		select sum(quantity * item_price) as total_price from orderitems where order_num = 20005;
	聚集不同值：select avg(distinct prod_price) as avg_price from products where vend_id = 1003;
	组合聚集函数：select count(*) as num_items,min(prod_price) as price_min,max(prod_price) as price_max,avg(prod_price) as price_avg from products;





				
