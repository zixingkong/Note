# 一、基础概念 
   JavaScript 的核心语言特性在 ECMA-262 中是以名为 ECMAScript 的伪语言的形式来定义的。ECMAScript 中包含了所有基本的语法、操符、数据类型以及完成基本的计算任务所必需的对象，但没有对取得输入和产生输出的机制作出规定。理解 ECMAScript 及其纷繁复杂的种细节，是理解其在Web 浏览器中的实现——JavaScript 的关键。目前大多数实现所遵循的都是 ECMA-262 第 3 版，但很多
也已经着手开始实现第 5 版了。以下简要总结了 ECMAScript 中基本的要素。

1. ECMAScript 中的基本数据类型包括 Undefined、 Null、 Boolean、 Number 和 String。
2. 与其他语言不同， ECMScript 没有为整数和浮点数值分别定义不同的数据类型， Number 类型可
用于表示所有数值。
3. ECMAScript 中也有一种复杂的数据类型，即 Object 类型，该类型是这门语言中所有对象的基
础类型。
4. 严格模式为这门语言中容易出错的地方施加了限制。
 ECMAScript 提供了很多与 C 及其他类 C 语言中相同的基本操作符，包括算术操作符、布尔操作
符、关系操作符、相等操作符及赋值操作符等。
5. ECMAScript 从其他语言中借鉴了很多流控制语句，例如 if 语句、 for 语句和 switch 语句等。
ECMAScript 中的函数与其他语言中的函数有诸多不同之处。
6. 无须指定函数的返回值，因为任何 ECMAScript 函数都可以在任何时候返回任何值。
7. 实际上，未指定返回值的函数返回的是一个特殊的 undefined 值。
8. ECMAScript 中也没有函数签名的概念，因为其函数参数是以一个包含零或多个值的数组的形式
传递的。
9. 可以向 ECMAScript 函数传递任意数量的参数，并且可以通过 arguments 对象来访问这些参数。
10. 由于不存在函数签名的特性， ECMAScript 函数不能重载。

# 二、变量、作用域和内存问题

  JavaScript 变量可以用来保存两种类型的值：基本类型值和引用类型值。基本类型的值源自以下 5
种基本数据类型： Undefined、 Null、 Boolean、 Number 和 String。基本类型值和引用类型值具
有以下特点：

1. 基本类型值在内存中占据固定大小的空间，因此被保存在栈内存中；
2. 从一个变量向另一个变量复制基本类型的值，会创建这个值的一个副本；
3. 引用类型的值是对象，保存在堆内存中；
4. 包含引用类型值的变量实际上包含的并不是对象本身，而是一个指向该对象的指针；
5. 从一个变量向另一个变量复制引用类型的值，复制的其实是指针，因此两个变量最终都指向同
一个对象；
6. 确定一个值是哪种基本类型可以使用 typeof 操作符，而确定一个值是哪种引用类型可以使用
instanceof 操作符。
所有变量（包括基本类型和引用类型）都存在于一个执行环境（也称为作用域）当中，这个执
行环境决定了变量的生命周期，以及哪一部分代码可以访问其中的变量。以下是关于执行环境的几
点总结：
7. 执行环境有全局执行环境（也称为全局环境）和函数执行环境之分；
8. 每次进入一个新执行环境，都会创建一个用于搜索变量和函数的作用域链；
9. 函数的局部环境不仅有权访问函数作用域中的变量，而且有权访问其包含（父）环境，乃至全
局环境；
10. 全局环境只能访问在全局环境中定义的变量和函数，而不能直接访问局部环境中的任何数据；
11. 变量的执行环境有助于确定应该何时释放内存。
JavaScript 是一门具有自动垃圾收集机制的编程语言，开发人员不必关心内存分配和回收问题。可
以对 JavaScript 的垃圾收集例程作如下总结。
12. 离开作用域的值将被自动标记为可以回收，因此将在垃圾收集期间被删除。
13. “标记清除”是目前主流的垃圾收集算法，这种算法的思想是给当前不使用的值加上标记，然
后再回收其内存。
14. 另一种垃圾收集算法是“引用计数”，这种算法的思想是跟踪记录所有值被引用的次数。JavaScript
引擎目前都不再使用这种算法；但在 IE 中访问非原生 JavaScript 对象（如 DOM 元素）时，这种
算法仍然可能会导致问题。
15. 当代码中存在循环引用现象时，“引用计数”算法就会导致问题。
16. 解除变量的引用不仅有助于消除循环引用现象，而且对垃圾收集也有好处。为了确保有效地回
收内存，应该及时解除不再使用的全局对象、全局对象属性以及循环引用变量的引用。
